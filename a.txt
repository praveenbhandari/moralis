// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

/**
 * @title Storage
 * @dev Store & retrieve value in a variable
 * @custom:dev-run-script ./scripts/deploy_with_ethers.ts
 */

contract Mediblock{

    struct patient{
        string name;
        string hash;
        address[] doctorAccessList;
    }

    struct doctor{ 
        string name;
        string hash;
        address[] patientAccessList;

    }


    struct user{
        string name;
        string hash;
        address[] accessList;
    }


    mapping(address => user) listOfUsers;
    
    mapping(address => patient) listOfPatients;
    
    mapping(address => doctor) listOfDoctors;


    function addNewPatient(string memory _name, string memory _hash, address  _addressOfUser) public{
        listOfPatients[_addressOfUser].name = _name;
        listOfPatients[_addressOfUser].hash = _hash;
    }

    function addNewDoctor(string memory _name, string memory _hash, address  _addressOfUser) public{
        listOfDoctors[_addressOfUser].name = _name;
        listOfDoctors[_addressOfUser].hash = _hash;
    }

    function permit_access(address _addressOfDoctor) payable public{
        address _addressOfPatient = msg.sender;
        require(msg.value == 2 ether);
        listOfPatients[_addressOfPatient].doctorAccessList.push(_addressOfDoctor);
        listOfDoctors[_addressOfDoctor].patientAccessList.push(_addressOfPatient);
    }

    function revoke_access(address _addressOfDoctor) payable public{
        address _addressOfPatient = msg.sender;
        remove_element_in_array(listOfDoctors[_addressOfDoctor].patientAccessList, _addressOfPatient);
        remove_element_in_array(listOfPatients[_addressOfPatient].doctorAccessList, _addressOfDoctor);
        payable(_addressOfPatient).send(2 ether);
    }



    function remove_element_in_array(address[] storage Array, address addr) internal returns(uint)
    {
        bool check = false;
        uint del_index = 0;
        for(uint i = 0; i<Array.length; i++){
            if(Array[i] == addr){
                check = true;
                del_index = i;
            }
        }
        if(!check) revert();
        else{
            if(Array.length == 1){
                delete Array[del_index];
            }
            else {
                Array[del_index] = Array[Array.length - 1];
                delete Array[Array.length - 1];

            }

        }
    }

    function returnDetailOfPatient(address _addressOfPatient) public returns(string memory, string memory, address[] memory){
        return (listOfPatients[_addressOfPatient].name, listOfPatients[_addressOfPatient].hash, listOfPatients[_addressOfPatient].doctorAccessList);
    }

    function returnDetailOfDoctor(address _addressOfDoctor) public returns(string memory, string memory, address[] memory){
        return (listOfDoctors[_addressOfDoctor].name, listOfDoctors[_addressOfDoctor].hash, listOfDoctors[_addressOfDoctor].patientAccessList);
    }
}